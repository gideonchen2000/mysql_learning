事务概述(P62)

1, 什么是事务
  一个事务是一个完整的业务逻辑单元 不可再分
  比如：银行账户转账，从A账户向B账户转账10000.需要执行两条update语句：
			update t_act set balance = balance - 10000 where actno = 'act-001';
			update t_act set balance = balance + 10000 where actno = 'act-002';
	以上两条DML语句必须同时成功，或者同时失败，不允许出现一条成功，一条失败。
  这样就需要使用"事务机制" 来保证同时成功或者失败

2, 和事务相关的语句只有DML语句 (inset delete update)

3, 如果所有的业务都能使用1条DML语句搞定，还需要事务机制吗?(不需要) ***但事实不是

4, 事务的特性
  四大特性:ACID
    A: 原子性：事务是最小的工作单元，不可再分
		C: 一致性：事务必须保证多条DML语句同时成功或者同时失败
		I：隔离性：事务A与事务B之间具有隔离
		D：持久性：持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束

5, 事物之间的隔离性
  四个级别
  第一:读未提交
  第二:读已提交
  第三:可重复读
  第四:序列化读/串行化读

  oracle数据库默认的隔离级别是：读已提交
	mysql数据库默认的隔离级别是：可重复读

6, 演示事务(P66)
 **mysql事务默认情况下是自动提交的
   什么是自动提交? 只要执行任意一条DML语句则提交一次.
   怎么关闭自动提交? start transaction;

准备表
  drop table if exists t_user;
 			create table t_user(
 				id int primary key auto_increment,
 				username varchar(255)
 			);

*演示：mysql中的事务是支持自动提交的, 只要执行一条DML, 则提交一次
	mysql> insert into t_user(username) values('zs');
	Query OK, 1 row affected (0.03 sec)

	mysql> select * from t_user;
	+----+----------+
	| id | username |
	+----+----------+
	|  1 | zs       |
	+----+----------+
	1 row in set (0.00 sec)

	mysql> rollback;
	Query OK, 0 rows affected (0.00 sec)

	mysql> select * from t_user;
	+----+----------+
	| id | username |
	+----+----------+
	|  1 | zs       |
	+----+----------+
	1 row in set (0.00 sec)

*演示：使用start transaction; 关闭自动提交机制
mysql> start transaction;
  Query OK, 0 rows affected (0.00 sec)

  mysql> insert into t_user(username) values('lisi');
  Query OK, 1 row affected (0.00 sec)

  mysql> select * from t_user;
  +----+----------+
  | id | username |
  +----+----------+
  |  1 | zs       |
  |  2 | lisi     |
  +----+----------+
  2 rows in set (0.00 sec)

  mysql> insert into t_user(username) values('wangwu');
  Query OK, 1 row affected (0.00 sec)

  mysql> select * from t_user;
  +----+----------+
  | id | username |
  +----+----------+
  |  1 | zs       |
  |  2 | lisi     |
  |  3 | wangwu   |
  +----+----------+
  3 rows in set (0.00 sec)

  mysql> rollback;
  Query OK, 0 rows affected (0.02 sec)

  mysql> select * from t_user;
  +----+----------+
  | id | username |
  +----+----------+
  |  1 | zs       |
  +----+----------+
  1 row in set (0.00 sec)
  --------------------------------------------------------------------
  mysql> start transaction;
  Query OK, 0 rows affected (0.00 sec)

  mysql> insert into t_user(username) values('wangwu');
  Query OK, 1 row affected (0.00 sec)

  mysql> insert into t_user(username) values('rose');
  Query OK, 1 row affected (0.00 sec)

  mysql> insert into t_user(username) values('jack');
  Query OK, 1 row affected (0.00 sec)

  mysql> select * from t_user;
  +----+----------+
  | id | username |
  +----+----------+
  |  1 | zs       |
  |  4 | wangwu   |
  |  5 | rose     |
  |  6 | jack     |
  +----+----------+
  4 rows in set (0.00 sec)

  mysql> commit;
  Query OK, 0 rows affected (0.04 sec)

  mysql> select * from t_user;
  +----+----------+
  | id | username |
  +----+----------+
  |  1 | zs       |
  |  4 | wangwu   |
  |  5 | rose     |
  |  6 | jack     |
  +----+----------+
  4 rows in set (0.00 sec)

  mysql> rollback;
  Query OK, 0 rows affected (0.00 sec)

  mysql> select * from t_user;
  +----+----------+
  | id | username |
  +----+----------+
  |  1 | zs       |
  |  4 | wangwu   |
  |  5 | rose     |
  |  6 | jack     |
  +----+----------+
  4 rows in set (0.00 sec)

*演示两个事务
查看事务的全局隔离级别: select @@global.tx isolation;
演示第1级别：读未提交
       set global transaction isolation level read uncommitted;
演示第2级别：读已提交
       set global transaction isolation level read committed;
演示第3级别：可重复读
       set global transaction isolation level repeatable read;
